import java.util.*;
class Graph {
    private int V;
    private List<List<Node>> adj;

    // Node to store the destination and distance
    class Node {
        int dest, weight;

        Node(int dest, int weight) {
            this.dest = dest;
            this.weight = weight;
        }
    }

    Graph(int V) {
        this.V = V;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++)
            adj.add(new ArrayList<>());
    }

    void addEdge(int src, int dest, int weight) {
        adj.get(src).add(new Node(dest, weight));
        adj.get(dest).add(new Node(src, weight)); // For undirected graph
    }

    // Dijkstra's algorithm to find shortest path
    void dijkstra(int src) {
        PriorityQueue<Node> pq = new PriorityQueue<>(V, Comparator.comparingInt(a -> a.weight));
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;
        pq.add(new Node(src, 0));

        while (!pq.isEmpty()) {
            int u = pq.poll().dest;
            for (Node neighbor : adj.get(u)) {
                int v = neighbor.dest;
                int weight = neighbor.weight;
                if (dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                    pq.add(new Node(v, dist[v]));
                }
            }
        }
        printSolution(dist);
    }

    void printSolution(int[] dist) {
        System.out.println("Vertex \t\t Distance from Source");
        for (int i = 0; i < V; i++)
            System.out.println(i + " \t\t " + dist[i]);
    }
}

public class FoodDeliveryRoute {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the number of locations
        System.out.print("Enter the number of locations: ");
        int numLocations = scanner.nextInt();

        Graph graph = new Graph(numLocations);

        // Input distances between locations
        System.out.println("Enter distances between locations:");

        for (int i = 0; i < numLocations; i++) {
            for (int j = i + 1; j < numLocations; j++) {
                System.out.print("Distance from location " + i + " to location " + j + ": ");
                int distance = scanner.nextInt();
                graph.addEdge(i, j, distance);
            }
        }

        // Perform Dijkstra's algorithm from starting location
        System.out.print("Enter the starting location: ");
        int startLocation = scanner.nextInt();
        graph.dijkstra(startLocation);

        scanner.close();
    }
}
